name: Project Board Automation

on:
  issues:
    types: [opened, closed, assigned, labeled]
  pull_request:
    types: [opened, closed, review_requested, converted_to_draft]
  project_card:
    types: [moved]

jobs:
  add-to-project:
    name: Add to Project Board
    runs-on: ubuntu-latest
    if: github.event_name == 'issues' && github.event.action == 'opened'
    steps:
      - name: Add to project
        uses: actions/add-to-project@v0.5.0
        with:
          project-url: https://github.com/orgs/nexanest/projects/1
          github-token: ${{ secrets.PROJECT_TOKEN }}

  move-based-on-labels:
    name: Move Cards Based on Labels
    runs-on: ubuntu-latest
    if: github.event_name == 'issues' && github.event.action == 'labeled'
    steps:
      - name: Move to column based on status label
        uses: alex-page/github-project-automation-plus@v0.8.3
        with:
          project: NexaNest Delivery Board
          column: |
            ${{
              contains(github.event.label.name, 'status: ready') && 'Ready' ||
              contains(github.event.label.name, 'status: in-progress') && 'In Progress' ||
              contains(github.event.label.name, 'status: blocked') && 'Blocked' ||
              contains(github.event.label.name, 'status: review') && 'In Review' ||
              contains(github.event.label.name, 'status: testing') && 'Testing' ||
              contains(github.event.label.name, 'status: done') && 'Done' ||
              ''
            }}
          repo-token: ${{ secrets.GITHUB_TOKEN }}

  update-sprint-field:
    name: Update Sprint Field
    runs-on: ubuntu-latest
    if: github.event_name == 'issues' && contains(github.event.label.name, 'sprint:')
    steps:
      - name: Update project field
        uses: actions/github-script@v7
        with:
          script: |
            const issue = context.issue;
            const label = context.payload.label.name;
            const sprintNumber = label.replace('sprint:', '').trim();
            
            // GraphQL to update project field
            const mutation = `
              mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $value: String!) {
                updateProjectV2ItemFieldValue(input: {
                  projectId: $projectId
                  itemId: $itemId
                  fieldId: $fieldId
                  value: { text: $value }
                }) {
                  projectV2Item {
                    id
                  }
                }
              }
            `;
            
            // Execute the mutation (you'll need to get these IDs from your project)
            await github.graphql(mutation, {
              projectId: process.env.PROJECT_ID,
              itemId: context.payload.issue.node_id,
              fieldId: process.env.SPRINT_FIELD_ID,
              value: `Sprint ${sprintNumber}`
            });

  calculate-cycle-time:
    name: Calculate Cycle Time
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'issues' && 
      github.event.action == 'labeled' &&
      contains(github.event.label.name, 'status: done')
    steps:
      - name: Calculate and comment cycle time
        uses: actions/github-script@v7
        with:
          script: |
            const issue = context.issue;
            const events = await github.paginate(
              github.rest.issues.listEventsForTimeline,
              {
                ...issue,
                per_page: 100
              }
            );
            
            // Find when status:ready was added
            let readyTime = null;
            let doneTime = new Date();
            
            for (const event of events) {
              if (event.event === 'labeled' && event.label.name === 'status: ready') {
                readyTime = new Date(event.created_at);
                break;
              }
            }
            
            if (readyTime) {
              const cycleTime = Math.floor((doneTime - readyTime) / (1000 * 60 * 60 * 24));
              
              await github.rest.issues.createComment({
                ...issue,
                body: `ðŸ“Š **Cycle Time**: ${cycleTime} days (from Ready to Done)`
              });
            }

  sync-pr-status:
    name: Sync PR Status with Issues
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Update linked issues
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            const action = context.payload.action;
            
            // Extract issue numbers from PR body
            const issueNumbers = (pr.body || '').match(/#(\d+)/g)?.map(ref => ref.replace('#', '')) || [];
            
            for (const issueNumber of issueNumbers) {
              let label = '';
              
              switch(action) {
                case 'opened':
                case 'ready_for_review':
                  label = 'status: review';
                  break;
                case 'closed':
                  if (pr.merged) {
                    label = 'status: testing';
                  }
                  break;
                case 'converted_to_draft':
                  label = 'status: in-progress';
                  break;
              }
              
              if (label) {
                // Remove old status labels
                const { data: labels } = await github.rest.issues.listLabelsOnIssue({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issueNumber
                });
                
                const statusLabels = labels.filter(l => l.name.startsWith('status:'));
                for (const statusLabel of statusLabels) {
                  await github.rest.issues.removeLabel({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: issueNumber,
                    name: statusLabel.name
                  });
                }
                
                // Add new status label
                await github.rest.issues.addLabels({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issueNumber,
                  labels: [label]
                });
              }
            }

  generate-sprint-report:
    name: Generate Sprint Report
    runs-on: ubuntu-latest
    if: github.event.schedule == '0 9 * * 1' # Every Monday at 9 AM
    steps:
      - name: Generate report
        uses: actions/github-script@v7
        with:
          script: |
            const oneWeekAgo = new Date();
            oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);
            
            // Get issues closed in the last week
            const { data: closedIssues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'closed',
              since: oneWeekAgo.toISOString()
            });
            
            // Get open issues
            const { data: openIssues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'sprint: current'
            });
            
            // Calculate metrics
            const velocity = closedIssues.filter(i => 
              i.labels.some(l => l.name.includes('effort:'))
            ).reduce((sum, issue) => {
              const effortLabel = issue.labels.find(l => l.name.includes('effort:'));
              const points = {
                'effort: XS': 1,
                'effort: S': 3,
                'effort: M': 5,
                'effort: L': 8,
                'effort: XL': 13
              }[effortLabel?.name] || 0;
              return sum + points;
            }, 0);
            
            // Create report issue
            const report = `# Sprint Report - Week of ${new Date().toLocaleDateString()}
            
            ## Summary
            - **Completed Issues**: ${closedIssues.length}
            - **Velocity**: ${velocity} story points
            - **In Progress**: ${openIssues.filter(i => i.labels.some(l => l.name === 'status: in-progress')).length}
            - **Blocked**: ${openIssues.filter(i => i.labels.some(l => l.name === 'status: blocked')).length}
            
            ## Completed Work
            ${closedIssues.map(i => `- #${i.number}: ${i.title}`).join('\n')}
            
            ## Blocked Items
            ${openIssues.filter(i => i.labels.some(l => l.name === 'status: blocked'))
              .map(i => `- #${i.number}: ${i.title}`).join('\n') || 'None'}
            
            ## Risks & Issues
            ${openIssues.filter(i => i.labels.some(l => l.name.includes('priority: critical')))
              .map(i => `- #${i.number}: ${i.title}`).join('\n') || 'None'}
            `;
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Sprint Report - ${new Date().toLocaleDateString()}`,
              body: report,
              labels: ['documentation', 'sprint-report']
            });

env:
  PROJECT_ID: ${{ secrets.PROJECT_ID }}
  SPRINT_FIELD_ID: ${{ secrets.SPRINT_FIELD_ID }}